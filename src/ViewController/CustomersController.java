package ViewController;


import DAO.AppointmentDaoImpl;
import DAO.CustomerDaoImpl;
import Model.Customer;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.stage.Stage;

import java.io.IOException;
import java.net.URL;
import java.sql.SQLException;
import java.util.Optional;
import java.util.ResourceBundle;

/** This class controls the CustomersController screen.*/
public class CustomersController implements Initializable {

    Stage stage;
    Parent scene;

    /** This method switches the screen to the location specified by the location parameter.
     * @param location path to the screen to load
     * @param event ActionEvent caused by the user clicking a button*/
    public void switchScreen(String location, ActionEvent event) throws IOException {
        stage = (Stage)((Button)event.getSource()).getScene().getWindow();
        scene = FXMLLoader.load(getClass().getResource(location));
        stage.setScene(new Scene(scene));
        stage.show();
    }

    /** This method gets all customers from the database and uses them to populate the Customers tableview.*/
    public void populateCustomerView() {
        try {
            customersView.setItems(CustomerDaoImpl.getAllCustomers());
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    @FXML
    private TableView<Customer> customersView;

    @FXML
    private TableColumn<Customer, Integer> customerIdCol;

    @FXML
    private TableColumn<Customer, String> customerNameCol;

    @FXML
    private TableColumn<Customer, String> addressCol;

    @FXML
    private TableColumn<Customer, String> postalCodeCol;

    @FXML
    private TableColumn<Customer, String> phoneNumberCol;

    @FXML
    private TableColumn<Customer, String> countryCol;

    @FXML
    private TableColumn<Customer, String> firstLevelDivisionCol;

    /** This is the onActionAddCustomer event handler.
     * When the Add button is clicked, the handler switches to the Add Customer screen.
     * @param event ActionEvent generated by the user clicking the Add button.*/
    @FXML
    public void onActionAddCustomer(ActionEvent event) throws IOException {
        switchScreen("/ViewController/AddCustomer.fxml", event);
    }

    /** This is the onActionDeleteCustomer event handler.
     * When the Delete button is clicked, the handler checks whether there is a Customer selected, then deletes the customer from the database.
     * @param event ActionEvent generated by the user clicking the Delete button.*/
    @FXML
    public void onActionDeleteCustomer(ActionEvent event) throws SQLException {
        if(customersView.getSelectionModel().getSelectedItem() == null) {
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setContentText("Please select a customer to delete.");
            alert.showAndWait();

            return;
        }

        Alert alert2 = new Alert (Alert.AlertType.CONFIRMATION, "All appointments associated with this customer will also be deleted. " +
                "Are you sure you want to delete this customer?");
        Optional<ButtonType> result = alert2.showAndWait();

        if(result.isPresent() && result.get() == ButtonType.OK) {
            AppointmentDaoImpl.deleteAssociatedAppointments(customersView.getSelectionModel().getSelectedItem().getCustomerId());
            CustomerDaoImpl.deleteCustomer(customersView.getSelectionModel().getSelectedItem());
        }
        populateCustomerView();
    }

    /** This is the onActionDisplayMenu event handler.
     * When the Menu button is clicked, the handler switches to the Menu screen.
     * @param event ActionEvent generated by the user clicking the Menu button.*/
    @FXML
    public void onActionDisplayMenu(ActionEvent event) throws IOException {
        switchScreen("/ViewController/Menu.fxml", event);
    }

    /**This is the onActionExitApplication event handler. When the Exit button is clicked, this handler exits the java application.
     * @param event ActionEvent is generated when the user clicks the exit button in the Customers screen*/
    @FXML
    public void onActionExitApplication(ActionEvent event) {
        System.exit(0);
    }

    /** This is the onActionUpdateCustomer event handler.
     * When the Update button is clicked, the handler checks whether there is a Customer selected, then switches to the Update Customer Screen and populates the form with the customer's data.
     * @param event ActionEvent generated by the user clicking the Update button.*/
    @FXML
    public void onActionUpdateCustomer(ActionEvent event) throws IOException, SQLException {
        if(customersView.getSelectionModel().getSelectedItem() == null) {
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setContentText("Please select a customer to update.");
            alert.showAndWait();
            return;
        }

        FXMLLoader loader = new FXMLLoader();
        loader.setLocation(getClass().getResource("/ViewController/UpdateCustomer.fxml"));
        loader.load();

        UpdateCustomerController UCController = loader.getController();
        UCController.sendCustomer(customersView.getSelectionModel().getSelectedItem());

        stage = (Stage)((Button)event.getSource()).getScene().getWindow();
        Parent scene = loader.getRoot();
        stage.setScene(new Scene(scene));
        stage.show();
    }

    /**This is the initialize method. This method initializes the controller.
     * @param rb resource bundle
     * @param url URL*/
    @Override
    public void initialize(URL url, ResourceBundle rb) {
        populateCustomerView();

        customerIdCol.setCellValueFactory(new PropertyValueFactory<>("customerId"));
        customerNameCol.setCellValueFactory(new PropertyValueFactory<>("customerName"));
        addressCol.setCellValueFactory(new PropertyValueFactory<>("address"));
        postalCodeCol.setCellValueFactory(new PropertyValueFactory<>("postalCode"));
        phoneNumberCol.setCellValueFactory(new PropertyValueFactory<>("phone"));
        countryCol.setCellValueFactory(new PropertyValueFactory<>("countryName"));
        firstLevelDivisionCol.setCellValueFactory(new PropertyValueFactory<>("divisionName"));
    }

}
